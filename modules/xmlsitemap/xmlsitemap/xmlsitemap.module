<?php
// $Id: xmlsitemap.module,v 1.1.2.56 2009/03/18 21:22:29 kiam Exp $

/**
 * @file
 * Creates a site map compatible with the sitemaps.org schema.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_cron().
 */
function xmlsitemap_cron() {
  if (!variable_get('site_offline', 0) && variable_get('xmlsitemap_cron_submit_frequency', -1) >= 0 && variable_get('xmlsitemap_sitemap_is_changed', FALSE)) {
    $count = variable_get('xmlsitemap_cron_submit_delay', -1);
    if (--$count <= 0) {
      module_invoke_all('xmlsitemap_engines', 'ping');
      variable_set('xmlsitemap_sitemap_is_changed', FALSE);
      $count = variable_get('xmlsitemap_cron_submit_frequency', -1);
    }
    variable_set('xmlsitemap_cron_submit_delay', $count);
  }
}

/**
 * Implementation of hook_exit().
 */
function xmlsitemap_exit() {
  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);
  if (variable_get('site_offline', 0) || arg(0) == 'batch') {
    return;
  }
  if (variable_get('xmlsitemap_log_access', FALSE)) {
    $items = array();
    $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
    $link_count = _xmlsitemap_link_count();
    if ($link_count > $chunk_size) {
      for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
        $items["sitemap$chunk.xml"] = $chunk;
      }
    }
    if (isset($items[arg(0)]) && is_null(arg(1))) {
      $chunk = $items[arg(0)];
      if ($chunk < $link_count / $chunk_size) {
        $write_log = TRUE;
      }
    }
    elseif (arg(0) == 'sitemap.xml' && is_null(arg(1))) {
      $write_log = TRUE;
    }
    if (isset($write_log)) {
      drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
      foreach (module_implements('xmlsitemap_engines') as $module) {
        $function = $module .'_xmlsitemap_engines';
        $result = $function('access');
        if (!empty($result)) {
          break;
        }
      }
      watchdog('xmlsitemap', 'Sitemap downloaded by @user-agent at @address.',
        array(
          '@user-agent' => !empty($result) ? $result : $_SERVER['HTTP_USER_AGENT'],
          '@address' => $_SERVER['REMOTE_ADDR'],
        )
      );
    }
  }
  if (!isset($write_log) && variable_get('xmlsitemap_submit', FALSE) && variable_get('xmlsitemap_sitemap_is_changed', FALSE)) {
    drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
    module_invoke_all('xmlsitemap_engines', 'ping');
    variable_set('xmlsitemap_sitemap_is_changed', FALSE);
  }
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'locale_languages_configure_form':
    case 'path_admin_form':
    case 'pathauto_admin_settings':
      $form['#submit'][] = 'xmlsitemap_settings_submit';
      break;
  }
}

/**
 * Implementation of hook_help().
 */
function xmlsitemap_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/xmlsitemap':
      $output = t('Configure the site map.');
      break;
    case 'admin/settings/xmlsitemap/engines':
      $output = t('Configure the behavior for search engines.');
      break;
    case 'admin/help#xmlsitemap':
      $output = '<p>'. t('XML Sitemap automatically creates a site map that conforms to the <a href="@sitemaps.org">sitemaps.org specification</a>. This helps search engines keep their search results up to date.', array('@sitemaps.org' => 'http://www.sitemaps.org')) .'</p>';
      $output .= '<h3>'. t('Supporting modules') .'</h3>';
      $output .= '<p>'. t('By itself, the XML Sitemap module adds only the front page of your site to the site map. Other types of links are handled by supporting modules.') .'</p>';
      $optional = '';
      foreach (module_implements('xmlsitemap_description', TRUE) as $module) {
        $function = $module .'_xmlsitemap_description';
        $optional .= $function();
      }
      if (!empty($optional)) {
        $output .= "<dl>$optional</dl>";
      }
      $output .= '<p>'. t('Links may be assigned a priority between 0.0 and 1.0. The default priority is 0.5. A priority of <em>Not in site map</em> excludes a link from the site map.') .'</p>';
      $output .= '<p>'. t('More information is available in the <a href="@module_docs">XML Sitemap documentation</a>.', array('@module_docs' => 'http://drupal.org/handbook/modules/gsitemap')) .'</p>';
      break;
    default:
      $output = '';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_menu() {
  $items = array();
  $access_config = array('administer site configuration');
  $items['admin/settings/xmlsitemap'] = array(
    'title' => 'XML Sitemap',
    'description' => 'Configure the XML site map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings_sitemap'),
    'access arguments' => $access_config,
  );
  $items['admin/settings/xmlsitemap/sitemap'] = array(
    'title' => 'Site map',
    'description' => 'Configure the XML site map.',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/xmlsitemap/engines'] = array(
    'title' => 'Search engines',
    'description' => 'Configure the submission settings of the XML site map to the search engines.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings_engines'),
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/xmlsitemap/tools/disable/modules'] = array(
    'title' => 'Disable modules',
    'page callback' => 'xmlsitemap_disable_modules',
    'access arguments' => $access_config,
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/xmlsitemap/tools/enable/helper'] = array(
    'title' => 'Enable !module',
    'title arguments' => array('!module' => 'xmlsitemap_helper.module'),
    'page callback' => 'xmlsitemap_enable_helper',
    'access arguments' => $access_config,
    'type' => MENU_CALLBACK,
  );
  $items['sitemap.xml'] = array(
    'title' => 'Site map index',
    'page callback' => 'xmlsitemap_output',
    'access callback' => 'xmlsitemap_anonymous_access',
    'type' => MENU_CALLBACK,
  );
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  if ($link_count > $chunk_size) {
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      $items["sitemap$chunk.xml"] = array(
        'title' => 'Site map !number',
        'title arguments' => array('!number' => $chunk),
        'page callback' => 'xmlsitemap_output',
        'page arguments' => array((string) $chunk),
        'access callback' => 'xmlsitemap_anonymous_access',
        'type' => MENU_CALLBACK,
      );
    }
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_perm() {
  return array('by-pass the authored nodes check', 'override node settings', 'override profile settings');
}


/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Disable the XML Sitemap modules.
 */
function xmlsitemap_disable_modules() {
  module_disable(module_implements('xmlsitemap_links'));
  drupal_goto('admin/reports/status');
}

/**
 * Enable xmlsitemap_helper.module if it has not been enabled.
 */
function xmlsitemap_enable_helper() {
  module_enable(array('xmlsitemap_helper'));
  variable_set('xmlsitemap_enable_helper_count', variable_get('xmlsitemap_enable_helper_count', 0) + 1);
  drupal_goto('admin/reports/status');
}

/**
 * Menu callback; display the site map.
 * @param $chunk
 *  An integer specifying which chunk of the site map is being requested.
 *  If not set and there is more than one chunk, display the site map index.
 */
function xmlsitemap_output($chunk = NULL) {
  if (isset($chunk) && !preg_match('/[0-9]+/', $chunk)) {
    drupal_not_found();
    exit();
  }
  $id = _xmlsitemap_cache_id();
  if (variable_get('xmlsitemap_sitemap_needs_update', FALSE)) {
    variable_set('xmlsitemap_update_timestamp', XMLSITEMAP_TIME);
    db_query("DELETE FROM {xmlsitemap} WHERE type ='frontpage'");
    $row = new stdClass();
    $row->module = 'xmlsitemap';
    $row->type = 'frontpage';
    $changefreq = variable_get('xmlsitemap_front_page_changefreq', 3600);
    $row->changed = XMLSITEMAP_TIME - $changefreq;
    $row->changefreq = $changefreq;
    $row->priority = variable_get('xmlsitemap_front_page_priority', 1);
    drupal_write_record('xmlsitemap', $row);
    module_invoke_all('xmlsitemap_links', variable_get('xmlsitemap_update_sitemap_request', array()));
    menu_rebuild();
    variable_set('xmlsitemap_update_sitemap_request', array());
    variable_set('xmlsitemap_sitemap_needs_update', FALSE);
    $result = _xmlsitemap_create_cache_files();
    if (variable_get("xmlsitemap_create_cache_result_$id", -1) !== $result) {
      variable_set("xmlsitemap_create_cache_result_$id", $result);
    }
  }
  elseif (_xmlsitemap_check_cache_files()) {
    $result = _xmlsitemap_create_cache_files();
    if (variable_get("xmlsitemap_create_cache_result_$id", -1) !== $result) {
      variable_set("xmlsitemap_create_cache_result_$id", $result);
    }
  }
  if (isset($result) && !$result) {
    drupal_not_found();
    exit();
  }
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  $parent_directory = variable_get('xmlsitemap_cache_directory', file_directory_path() .'/xmlsitemap');
  $headers = array("Content-type: text/xml; charset=utf-8");
  if (isset($chunk)) {
    if ($chunk < $link_count / $chunk_size) {
      file_transfer("$parent_directory/xsm-$id-$chunk.xml", $headers);
    }
  }
  else {
    file_transfer("$parent_directory/xsm-$id.xml", $headers);
  }
}

/**
 * Form builder; return the search engine settings form.
 */
function xmlsitemap_settings_engines() {
  $form['submission'] = array(
    '#type' => 'fieldset',
    '#title' => t('Submission settings'),
    '#collapsible' => TRUE,
  );
  $form['submission']['xmlsitemap_submit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Submit the site map when updated'),
    '#description' => t('If enabled, the search engines will be notified of changes to the site map each time it is updated.'),
    '#default_value' => variable_get('xmlsitemap_submit', FALSE),
  );
  $form['submission']['xmlsitemap_log_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log access'),
    '#description' => t('If enabled, a watchdog entry will be made each time the site map is accessed, containing information about the requestor.'),
    '#default_value' => variable_get('xmlsitemap_log_access', FALSE),
  );
  $form['submission']['xmlsitemap_cron_submit_frequency'] = array(
    '#type' => 'select',
    '#title' => t('Frequency of cron site map submission'),
    '#description' => t('The rate at which the site map is submitted to the search engines over the times the cron maintenance tasks are executed.'),
    '#default_value' => variable_get('xmlsitemap_cron_submit_frequency', -1),
    '#options' => array(
      '10' => t('Once every ten times'),
      '9' => t('Once every nine times'),
      '8' => t('Once every eight times'),
      '7' => t('Once every seven times'),
      '6' => t('Once every six times'),
      '5' => t('Once every five times'),
      '4' => t('Once every four times'),
      '3' => t('Once every three times'),
      '2' => t('Once every two times'),
      '1' => t('Always'),
      '-1' => t('Never'),
    ),
  );
  drupal_alter('xmlsitemap_engine_settings', $form);
  $form = system_settings_form($form);
  array_unshift($form['#submit'], 'xmlsitemap_settings_submit');
  return $form;
}

/**
 * Form builder; return the site map settings form.
 */
function xmlsitemap_settings_sitemap() {
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
    '#weight' => -1,
  );
  $form['general']['xmlsitemap_chunk_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Chunk size'),
    '#default_value' => variable_get('xmlsitemap_chunk_size', 200),
    '#size' => 10,
    '#maxlength' => 5,
    '#description' => t('This is the number of links to include in one site map. Values can range between 1 and 50,000. If the total number of links exceeds the chunk size, multiple site maps will be generated.'),
  );
  $form['general']['xmlsitemap_all_links_to_default_language'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add all the links to the default language site map'),
    '#default_value' => variable_get('xmlsitemap_all_links_to_default_language', 0),
    '#description' => t('This option will be used only when the language negotiation uses a path prefix mechanism.'),
  );
  $form['general']['xmlsitemap_front_page_changefreq'] = array(
    '#type' => 'select',
    '#title' => t('Front page change frequency'),
    '#description' => t('The change frequency associated with the front page.'),
    '#default_value' => variable_get('xmlsitemap_front_page_changefreq', 3600),
    '#options' => array(
      '3600' => 'Hourly',
      '86400' => 'Daily',
      '604800' => 'Weekly',
      '2419200' => 'Monthly',
      '29030400' => 'Yearly',
    ),
  );
  $form['general']['xmlsitemap_cache_directory'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache directory'),
    '#default_value' => variable_get('xmlsitemap_cache_directory', file_directory_path() .'/xmlsitemap'),
    '#size' => 60,
    '#maxlength' => 150,
    '#description' => t('The directory where the cache files are created; change it only if you are having problems with the default setting.'),
  );
  $form['general']['priority'] = array(
    '#type' => 'fieldset',
    '#title' => t('Priority'),
    '#collapsible' => TRUE,
  );
  $form['general']['priority']['a'] = array();
  $form['general']['priority']['b'] = array();
  $form['general']['priority']['c'] = array();
  $form['general']['priority']['a']['xmlsitemap_front_page_priority'] = array(
    '#type' => 'select',
    '#title' => t('Front page priority'),
    '#description' => t('The absolute priority for the front page.'),
    '#default_value' => variable_get('xmlsitemap_front_page_priority', 1),
    '#options' => xmlsitemap_helper_priority_options(),
  );
  drupal_alter('xmlsitemap_sitemap_settings', $form);
  $form = system_settings_form($form);
  $form['#submit'][] = 'xmlsitemap_settings_submit';
  $form['#validate'][] = 'xmlsitemap_settings_sitemap_validate';
  return $form;
}

/**
 * Validate the site map settings form.
 */
function xmlsitemap_settings_sitemap_validate($form, &$form_state) {
  $chunk_size = $form_state['values']['xmlsitemap_chunk_size'];
  if (!is_numeric($chunk_size) || $chunk_size <= 0 || $chunk_size > 50000) {
    form_set_error('xmlsitemap_chunk_size', t('The number of links in a site map chunk must be a number between 1, and 50,000 (1 and 50,000 included).'));
  }
  $directory = $form_state['values']['xmlsitemap_cache_directory'];
  file_check_directory($directory, FILE_CREATE_DIRECTORY, 'xmlsitemap_cache_directory');
  $form_state['values']['xmlsitemap_cache_directory'] = $directory;
}

/**
 * Submit the settings form.
 */
function xmlsitemap_settings_submit($form, &$form_state) {
  menu_rebuild();
  xmlsitemap_helper_update_sitemap();
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Function used to determinate if the user is an anonymous user, and then he
 * can access the site map content.
 */
function xmlsitemap_anonymous_access() {
  global $user;
  return $user->uid == 0;
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Return the cache ID.
 */
function _xmlsitemap_cache_id() {
  static $id;
  global $base_url, $language;
  if (!isset($id)) {
    $id = substr(md5($language->language . $base_url), 0, 8);
  }
  return $id;
}

/**
 * Check the cache files.
 * @return
 *   TRUE if the cache files must be updated / created, FALSE otherwise.
 */
function _xmlsitemap_check_cache_files() {
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  $id = _xmlsitemap_cache_id();
  $parent_directory = variable_get('xmlsitemap_cache_directory', file_directory_path() .'/xmlsitemap');
  // If the directory that should contains the cache files doesn't exist, then
  // the cache files must be created.
  if (!is_dir($parent_directory)) {
    return TRUE;
  }
  $update_timestamp = variable_get('xmlsitemap_update_timestamp', XMLSITEMAP_TIME);
  // If the cache files creation has failed last time, the cache files must be
  // created.
  if (variable_get("xmlsitemap_create_cache_result_$id", -1) !== TRUE) {
    return TRUE;
  }
  // If the main cache file doesn't exist, then the cache files must be
  // created.
  if (!file_exists($parent_directory ."/xsm-$id.xml")) {
    return TRUE;
  }
  // If the main cache file has been created before the site map content has
  // been updated, then the cache files must be updated.
  if (filemtime($parent_directory ."/xsm-$id.xml") < $update_timestamp) {
    return TRUE;
  }
  // Check also the other cache files.
  if ($link_count > $chunk_size) {
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      if (!file_exists($parent_directory ."/xsm-$id-$chunk.xml")) {
        return TRUE;
      }
      if (filemtime($parent_directory ."/xsm-$id-$chunk.xml") < $update_timestamp) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Create a site map chunk cache file.
 * @param $fp
 *  A file resource used to write in.
 * @param $chunk_size
 *  The number of links the chunk must cointain.
 * @param $chunk
 *  The progressive number associated with the site map chunk (starting from
 *  0).
 */
function _xmlsitemap_create_cache_chunk($fp, $chunk_size, $chunk = 0) {
  fwrite($fp, '<?xml version="1.0" encoding="UTF-8"?>'."\n");
  fwrite($fp, '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n");
  fwrite($fp, '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n");
  fwrite($fp, '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n");
  fwrite($fp, '  http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">'."\n");
  $start = $chunk * $chunk_size;
  $links = db_query_range("SELECT xsm.loc, xsm.module, xsm.type, xsm.changed, xsm.changefreq, xsm.priority". xmlsitemap_helper_sitemap_query() ."ORDER BY xsm.changed DESC, xsm.changefreq, xsm.priority DESC, xsm.loc", $start, $chunk_size);
  while ($link = db_fetch_object($links)) {
    if ($link->type == 'frontpage') {
      $url = url(NULL, array('absolute' => TRUE));
    }
    elseif ($link->module && function_exists($link->module .'_url')) {
      $function = $link->module .'_url';
      $url = $function($link->loc, $link->type);
    }
    else {
      $url = url($link->loc, array('absolute' => TRUE));
    }
    fwrite($fp, '  <url>'."\n");
    fwrite($fp, '    <loc>'. check_url($url) .'</loc>'."\n");
    fwrite($fp, '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $link->changed) .'</lastmod>'."\n");
    fwrite($fp, '    <changefreq>'. xmlsitemap_helper_frequency($link->changefreq) .'</changefreq>'."\n");
    fwrite($fp, '    <priority>'. number_format($link->priority, 1) .'</priority>'."\n");
    fwrite($fp, '  </url>'."\n");
  }
  fwrite($fp, '</urlset>');
}

/**
 * Create the cache files containing the site map.
 * @return
 *  TRUE if the operation has been successfull, FALSE otherwise.
 */
function _xmlsitemap_create_cache_files() {
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  $id = _xmlsitemap_cache_id();
  $parent_directory = variable_get('xmlsitemap_cache_directory', file_directory_path() .'/xmlsitemap');
  // If the directory doesn't exist, then create it.
  if (!is_dir($parent_directory)) {
    if (@mkdir($parent_directory)) {
      @chmod($parent_directory, 0775);
    }
    else {
      watchdog('xmlsitemap', 'Could not create the cache files directory (@directory)', array('@directory' => $parent_directory), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  if ($link_count > $chunk_size) {
    if (!$fp = fopen($parent_directory ."/xsm-$id.xml", 'wb')) {
      watchdog('xmlsitemap', 'Cannot create the cache file (@file)', array('@file' => $parent_directory ."/xsm-$id.xml"), WATCHDOG_ERROR);
      return FALSE;
    }
    fwrite($fp, '<?xml version="1.0" encoding="UTF-8"?>'."\n");
    fwrite($fp, '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n");
    fwrite($fp, '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n");
    fwrite($fp, '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n");
    fwrite($fp, '  http://www.sitemaps.org/schemas/sitemap/0.9/siteindex.xsd">'."\n");
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      fwrite($fp, '  <sitemap>'."\n");
      fwrite($fp, '    <loc>'. url("sitemap$chunk.xml", array('absolute' => TRUE)) .'</loc>'."\n");
      $from = $chunk * $chunk_size;
      $changed = db_result(db_query_range("SELECT changed". xmlsitemap_helper_sitemap_query() ."ORDER BY xsm.changed DESC", $from, $chunk_size));
      fwrite($fp, '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $changed) .'</lastmod>'."\n");
      fwrite($fp, '  </sitemap>'."\n");
    }
    fwrite($fp, '</sitemapindex>');
    fclose($fp);
    // Set standard file permissions for webserver-generated files.
    @chmod($parent_directory ."/xsm-$id.xml", 0664);
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      if (!$fp = fopen($parent_directory ."/xsm-$id-$chunk.xml", 'wb')) {
        watchdog('xmlsitemap', 'Cannot create the cache file (@file)', array('@file' => $parent_directory ."/xsm-$id-$chunk.xml"), WATCHDOG_ERROR);
        return FALSE;
      }
      _xmlsitemap_create_cache_chunk($fp, $chunk_size, $chunk);
      fclose($fp);
      // Set standard file permissions for webserver-generated files.
      @chmod($parent_directory ."/xsm-$id-$chunk.xml", 0664);
    }
  }
  else {
    if (!$fp = fopen($parent_directory ."/xsm-$id.xml", 'wb')) {
      watchdog('xmlsitemap', 'Cannot create the cache file (@file)', array('@file' => $parent_directory ."/xsm-$id.xml"), WATCHDOG_ERROR);
      return FALSE;
    }
    _xmlsitemap_create_cache_chunk($fp, $chunk_size);
    fclose($fp);
    // Set standard file permissions for webserver-generated files.
    @chmod($parent_directory ."/xsm-$id.xml", 0664);
  }
  return TRUE;
}

/**
 * Return the number of links present in xmlsitemap table.
 */
function _xmlsitemap_link_count() {
  static $link_count;
  if (!isset($link_count)) {
    $link_count = db_result(db_query("SELECT COUNT(xsm.loc)". xmlsitemap_helper_sitemap_query()));
  }
  return $link_count;
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
