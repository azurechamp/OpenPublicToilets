<?php
// $Id: xmlsitemap_node.module,v 1.19.2.81 2009/03/23 14:00:46 kiam Exp $

/**
 * @file
 * Adds nodes to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_comment().
 */
function xmlsitemap_node_comment($a1, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
    case 'delete':
    case 'publish':
    case 'unpublish':
      $maxcomments = (integer) db_result(db_query('SELECT MAX(comment_count) FROM {node_comment_statistics}'));
      $nid = is_array($a1) ? $a1['nid'] : $a1->nid;
      if ($nid && $maxcomments > 1) {
        $comments = (integer) db_result(db_query('SELECT comment_count
          FROM {node_comment_statistics}
          WHERE nid = %d', $nid)
        );
        $query = "SELECT nid, changed, previously_changed, comment_ratio, priority_override
          FROM {xmlsitemap_node}
          WHERE nid = %d";
        $link = db_fetch_object(db_query($query, $nid));
        $node = node_load($nid, NULL, TRUE);
        if ($link) {
          $update = TRUE;
        }
        else {
          if (!$node) {
            return;
          }
          $row = new stdClass();
          $row->nid = $nid;
          $row->changed = $node->changed;
          $row->previously_changed = $node->created;
        }
        $row->comment_ratio = $comments / $maxcomments;
        drupal_write_record('xmlsitemap_node', $row, isset($update) ? 'nid' : NULL);
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_node_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_admin_settings':
      if (!isset($form['xmlsitemap'])) {
        $form['xmlsitemap'] = array(
          '#type' => 'fieldset',
          '#title' => t('XML site map'),
          '#collapsible' => TRUE,
        );
      }
      $form['xmlsitemap']['xmlsitemap_node_posts_count'] = array(
        '#type' => 'select',
        '#title' => t('User posts threshold'),
        '#description' => t('The number of posts a user must author before his posts are added to the site map.') .' '. t('This is the default value used for the users for which the post threshold has not been set.'),
        '#default_value' => variable_get('xmlsitemap_node_posts_count', 100),
        '#options' => array(
          '1' => t('1'),
          '5' => t('5'),
          '10' => t('10'),
          '20' => t('20'),
          '50' => t('50'),
          '100' => t('100'),
          '200' => t('200'),
          '500' => t('500'),
          '0' => t('Never add the posts'),
        ),
        '#access' => user_access('override profile settings') || user_access('administer users'),
      );
      $form['buttons']['#weight'] = isset($form['buttons']['#weight']) ? $form['buttons']['#weight'] + 1 : 1;
      $form['#submit'][] = 'xmlsitemap_user_form_submit';
      break;
    case 'node_type_form':
      if (isset($form['identity']['type'])) {
        if (!isset($form['xmlsitemap'])) {
          $form['xmlsitemap'] = array(
            '#type' => 'fieldset',
            '#title' => t('XML site map'),
            '#collapsible' => TRUE,
            '#weight' => 30,
          );
        }
        $form['xmlsitemap']['xmlsitemap_node_type_priority'] = array(
          '#type' => 'select',
          '#title' => t('Priority adjustment'),
          '#description' => t('This number will be added to the priority of this content type.'),
          '#default_value' => variable_get('xmlsitemap_node_type_priority_'. $form['#node_type']->type, 0.5),
          '#options' => xmlsitemap_helper_priority_options('exclude'),
        );
        $form['#submit'][] = 'xmlsitemap_node_type_submit';
      }
      break;
    default:
      if (isset($form['type']) && $form_id == $form['type']['#value'] .'_node_form') {
        $node = $form['#node'];
        if (!isset($form['xmlsitemap'])) {
          $form['xmlsitemap'] = array(
            '#type' => 'fieldset',
            '#title' => t('XML site map'),
            '#collapsible' => TRUE,
            '#access' => user_access('override node priority') || user_access('administer nodes'),
            '#weight' => 30,
          );
        }
        $options = xmlsitemap_helper_priority_options('both');
        $default = variable_get('xmlsitemap_node_type_priority_'. $node->type, '0.5');
        $form['xmlsitemap']['priority_override'] = array(
          '#type' => 'select',
          '#title' => t('Priority'),
          '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
          '#default_value' => isset($node->priority_override) ? $node->priority_override : -2.0,
          '#options' => $options,
          '#access' => user_access('override node priority') || user_access('administer nodes'),
        );
        $form['xmlsitemap_node_status'] = array(
          '#type' => 'value',
          '#value' => $node->status,
        );
      }
      break;
  }
}

/**
 * Implementation of hook_node_operations().
 */
function xmlsitemap_node_node_operations() {
  $operations = array(
    'xmlsitemap_add_nodes' => array(
      'label' => t('Add the selected posts to the XML site map'),
      'callback' => '_xmlsitemap_node_priority_operations',
      'callback arguments' => array('priority' => 0.5),
    ),
    'xmlsitemap_change_nodes_priority' => array(
      'label' => t('Change the XML site map priority of the selected posts to default'),
      'callback' => '_xmlsitemap_node_priority_operations',
      'callback arguments' => array('priority' => -2.0),
    ),
    'xmlsitemap_remove_nodes' => array(
      'label' => t('Remove the selected posts from the XML site map'),
      'callback' => '_xmlsitemap_node_priority_operations',
      'callback arguments' => array('priority' => -1.0),
    ),
  );
  return $operations;
}

/**
 * Implementation of hook_node_type().
 */
function xmlsitemap_node_node_type($op, $info) {
  if ($op == 'delete') {
    variable_del('xmlsitemap_node_type_priority_'. $info->type);
  }
  elseif ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {
    variable_set('xmlsitemap_node_type_priority_'. $info->type, variable_get('xmlsitemap_node_type_priority_'. $info->old_type, 0.5));
    variable_del('xmlsitemap_node_type_priority_'. $info->old_type);
  }
  xmlsitemap_helper_update_sitemap('xmlsitemap_node');
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_node_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'prepare':
      if (isset($node->nid)) {
        $priority_override = db_result(db_query("SELECT priority_override
          FROM {xmlsitemap_node} WHERE nid = %d",
          $node->nid)
        );
        $node->priority_override = $priority_override !== FALSE ? $priority_override : -2.0;
      }
      break;
    case 'insert':
      $row = new stdClass();
      $row->nid = $node->nid;
      $row->changed = $node->changed;
      $row->previously_changed = $node->created;
      $row->priority_override = isset($node->priority_override) ? $node->priority_override : -2.0;
      drupal_write_record('xmlsitemap_node', $row);
      if ($node->status) {
        xmlsitemap_helper_update_sitemap('xmlsitemap_node');
      }
      break;
    case 'update':
      if (($result = db_fetch_object(db_query("SELECT nid, changed, previously_changed, comment_ratio, priority_override FROM {xmlsitemap_node} WHERE nid = %d", $node->nid))) === FALSE) {
        $row = new stdClass();
        $row->nid = $node->nid;
        $row->changed = $node->changed;
        $row->previously_changed =  $node->created;
        $row->priority_override = isset($node->priority_override) ? $node->priority_override : -2.0;
      }
      else {
        $row = $result;
        $row->previously_changed = $row->changed;
        $row->changed = $node->changed;
        if (isset($node->priority_override)) {
          $row->priority_override =  $node->priority_override;
        }
      }
      drupal_write_record('xmlsitemap_node', $row, $result === FALSE ? NULL : 'nid');
      if ($node->status || $node->xmlsitemap_node_status) {
        xmlsitemap_helper_update_sitemap('xmlsitemap_node');
      }
      break;
    case 'delete':
      db_query("DELETE FROM {xmlsitemap_node} WHERE nid = %d", $node->nid);
      if ($node->status) {
        xmlsitemap_helper_update_sitemap('xmlsitemap_node');
      }
      break;
  }
}

/**
 * Implementation of hook_user().
 */
function xmlsitemap_node_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'form':
      if ($category != 'account') {
        return array();
      }
    case 'register':
      $form['xmlsitemap'] = array(
        '#type' => 'fieldset',
        '#title' => t('XML site map'),
        '#collapsible' => TRUE,
        '#access' => user_access('override profile settings') || user_access('administer users'),
        '#weight' => 7,
      );
      $form['xmlsitemap']['xmlsitemap_node_posts_count'] = array(
        '#type' => 'select',
        '#title' => t('User posts threshold'),
        '#description' => t('The number of posts a user must author before his posts are added to the site map.'),
        '#default_value' => variable_get('xmlsitemap_node_posts_count_'. $account->uid, variable_get('xmlsitemap_node_posts_count', 100)),
        '#options' => array(
          '1' => t('1'),
          '5' => t('5'),
          '10' => t('10'),
          '20' => t('20'),
          '50' => t('50'),
          '100' => t('100'),
          '200' => t('200'),
          '500' => t('500'),
          '0' => t('Never add the posts'),
        ),
        '#access' => user_access('override profile settings') || user_access('administer users'),
      );
      return $form;
    case 'insert':
    case 'update':
      if (isset($edit['xmlsitemap_node_posts_count'])) {
        variable_set('xmlsitemap_node_posts_count_'. $account->uid, $edit['xmlsitemap_node_posts_count']);
        $edit['xmlsitemap_node_posts_count'] = NULL;
        xmlsitemap_helper_update_sitemap('xmlsitemap_node');
      }
      break;
    case 'delete':
      variable_del('xmlsitemap_node_posts_count_'. $account->uid);
      xmlsitemap_helper_update_sitemap('xmlsitemap_node');
      break;
  }
}

/**
 * Implementation of hook_xmlsitemap_description().
 */
function xmlsitemap_node_xmlsitemap_description() {
  return '<dt>'. t('XML Sitemap: Node') .'</dt>'.
    '<dd>'. t('<em>XML Sitemap: Node</em> adds nodes (content) to the site map. The default priority of a node is determined by a combination of its <a href="@content">content type</a> priority, whether it appears on the front page of your site, and the number of comments it has received. You can override the default priority for individual nodes when you add or edit a node.', array('@content' => url('admin/content/types'))) .'</dd>';
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_node_xmlsitemap_links($modules) {
  if (isset($modules['xmlsitemap']) || isset($modules['xmlsitemap_node'])) {
    db_query("DELETE FROM {xmlsitemap} WHERE type ='node'");
    $query = "SELECT n.nid, n.vid, n.type, n.language, n.uid, n.promote, xn.changed, xn.previously_changed, xn.priority_override, xn.comment_ratio
      FROM {node} n
      INNER JOIN {xmlsitemap_node} xn ON n.nid = xn.nid
      WHERE n.status > 0
        AND xn.priority_override <> -1.0";
    $result = db_query(db_rewrite_sql($query));
    $row = new stdClass();
    $row->module = 'xmlsitemap_node';
    $row->type = 'node';
    while ($node = db_fetch_object($result)) {
      $posts_threshold = variable_get('xmlsitemap_node_posts_count_'. $node->uid, variable_get('xmlsitemap_node_posts_count', 100));
      $posts = (integer) db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE uid = %d", $node->uid));
      $user = user_load($node->uid);
      // Don't add the nodes authored by a user who has been deleted.
      if ($user === FALSE) {
        continue;
      }
      if (!user_access('by-pass the authored nodes check', $user) && $posts_threshold > $posts) {
        continue;
      }
      $row->loc = 'node/'. $node->nid;
      $row->id = $node->nid;
      $row->sid = $node->vid;
      $row->language = $node->language;
      $row->changed = $node->changed;
      $row->changefreq = max(XMLSITEMAP_TIME - $node->changed, empty($node->previously_changed) ? 0 : $node->changed - $node->previously_changed);
      if ($node->priority_override != -2.0) {
        $priority = $node->priority_override;
      }
      elseif (($priority = variable_get('xmlsitemap_node_type_priority_'. $node->type, 0.5)) != -1.0) {
        if ($node->promote) {
          $priority += variable_get('xmlsitemap_node_promote_priority', 0.3);
        }
        $priority += $node->comment_ratio * variable_get('xmlsitemap_node_comment_priority', 0.2);
      }
      $row->priority = min(max(round($priority, 1), 0.0), 1.0);
      drupal_write_record('xmlsitemap', $row);
    }
  }
}

/**
 * Implementation of hook_xmlsitemap_sitemap_settings_alter().
 */
function xmlsitemap_node_xmlsitemap_sitemap_settings_alter(&$form) {
  $options = xmlsitemap_helper_priority_options();
  $form['general']['priority']['a']['xmlsitemap_node_promote_priority'] = array(
    '#type' => 'select',
    '#title' => t('Promotion adjustment'),
    '#description' => t("This number will be added to the priority of each post that is promoted to the front page. This setting doesn't apply for the nodes for which the priority is overriden."),
    '#default_value' => variable_get('xmlsitemap_node_promote_priority', 0.3),
    '#options' => $options,
  );
  $form['general']['priority']['a']['xmlsitemap_node_comment_priority'] = array(
    '#type' => 'select',
    '#title' => t('Comment ratio weight - nodes'),
    '#description' => t("This number will be added to the priority of the post with the highest number of comments; for the other posts, the number is calculated proportionally to the number of comments. This doesn't apply if the maximum number of comments is one, nor for the nodes for which the priority is overriden."),
    '#default_value' => variable_get('xmlsitemap_node_comment_priority', 0.2),
    '#options' => $options,
  );
}

/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Add submit actions to forms.
 */
function xmlsitemap_node_type_submit($form, &$form_state) {
  xmlsitemap_helper_update_sitemap('xmlsitemap_node');
}

/*****************************************************************************
 * Private functions - node operation callbacks.
 ****************************************************************************/

/**
 * Node operations callback.
 */
function _xmlsitemap_node_priority_operations($nodes, $priority) {
  if (count($nodes)) {
    $batch = array(
      'operations' => array(
        array('_xmlsitemap_node_batch_process', array($nodes, $priority))
      ),
      'finished' => 'xmlsitemap_helper_batch_operations_finished',
      'title' => t('Processing'),
      'progress_message' => '',
      'error_message' => t('The update has encountered an error.'),
    );
    batch_set($batch);
  }
}

/*****************************************************************************
 * Private functions - batch operation callbacks.
 ****************************************************************************/

/**
 * Node operations batch process callback.
 */
function _xmlsitemap_node_batch_process($nodes, $priority, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($nodes);
    $context['sandbox']['nodes'] = $nodes;
    if (module_exists('comment')) {
      $context['sandbox']['maxcomments'] = (integer) db_result(db_query('SELECT MAX(comment_count) FROM {node_comment_statistics}'));
    }
  }
  $nid = array_shift($context['sandbox']['nodes']);
  if ($node = node_load($nid, NULL, TRUE)) {
    $result = db_fetch_object(db_query("SELECT nid, changed, previously_changed, comment_ratio, priority_override
      FROM {xmlsitemap_node}
      WHERE nid = %d", $nid)
    );
    if ($result === FALSE) {
      $row = new stdClass();
      $row->nid = $nid;
      $row->changed = $node->changed;
      $row->previously_changed = $node->created;
    }
    else {
      $row = $result;
      if ($node->changed > $row->changed) {
        $row->previously_changed = $row->changed;
        $row->changed = $node->changed;
      }
    }
    $row->priority_override = $priority;
    drupal_write_record('xmlsitemap_node', $row, $result === FALSE ? NULL : 'nid');
    $context['results'][] = l($node->title, 'node/'. $node->nid);
    if (count($context['results']) > 6) {
      array_shift($context['results']);
    }
  }
  $context['sandbox']['progress']++;
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
