<?php
// $Id: xmlsitemap_term.module,v 1.11.2.43 2009/03/19 13:19:50 kiam Exp $

/**
 * @file
 * Adds terms to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_term_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'taxonomy_form_term':
      $priority = db_result(db_query("SELECT priority_override
        FROM {xmlsitemap_term}
        WHERE tid = %d", $form['tid']['#value'])
      );
      if ($priority === FALSE) {
        $priority = -2.0;
      }
      $options = xmlsitemap_helper_priority_options('both');
      $default = variable_get('xmlsitemap_term_vocabulary_priority_'. $form['vid']['#value'], '0.5');
      if (!isset($form['xmlsitemap'])) {
        $form['xmlsitemap'] = array(
          '#type' => 'fieldset',
          '#title' => t('XML site map'),
          '#collapsible' => TRUE,
        );
      }
      $form['xmlsitemap']['xmlsitemap_term_priority'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
        '#default_value' => $priority,
        '#options' => $options,
      );
      $form['submit']['#weight'] = isset($form['submit']['#weight']) ? $form['submit']['#weight'] + 1 : 1;
      $form['delete']['#weight'] = isset($form['delete']['#weight']) ? $form['delete']['#weight'] + 1 : 1;
      break;
    case 'taxonomy_form_vocabulary':
      $form['xmlsitemap'] = array(
        '#type' => 'fieldset',
        '#title' => t('XML site map'),
        '#collapsible' => TRUE,
      );
      $form['xmlsitemap']['xmlsitemap_term_vocabulary_priority'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#description' => t('This will be the default priority of terms in this vocabulary.'),
        '#default_value' => variable_get('xmlsitemap_term_vocabulary_priority_'. $form['vid']['#value'], 0.5),
        '#options' => xmlsitemap_helper_priority_options('exclude'),
      );
      $form['submit']['#weight'] = isset($form['submit']['#weight']) ? $form['submit']['#weight'] + 1 : 1;
      $form['delete']['#weight'] = isset($form['delete']['#weight']) ? $form['delete']['#weight'] + 1 : 1;
      break;
    default:
      if (isset($form['type']['#value']) && $form_id == $form['type']['#value'] .'_node_form') {
        $node = $form['#node'];
        if (isset($form['type']) && isset($node->nid)) {
          if (isset($node->taxonomy)) {
            $terms = $node->taxonomy;
          }
          else {
            $terms = taxonomy_node_get_terms($node->nid);
          }
          $form['xmlsitemap_term_taxonomy'] = array(
            '#type' => 'value',
            '#value' => $terms,
          );
        }
      }
      break;
  }
}

/**
 * Implementation of hook_node_operations().
 */
function xmlsitemap_term_node_operations() {
  $operations = array(
    'xmlsitemap_add_terms' => array(
      'label' => t('Add the vocabulary terms of the selected posts to the XML site map'),
      'callback' => '_xmlsitemap_term_priority_operations',
      'callback arguments' => array('priority' => 0.5),
    ),
    'xmlsitemap_change_terms_priority' => array(
      'label' => t('Change the XML site map priority of the selected posts vocabulary terms to default'),
      'callback' => '_xmlsitemap_term_priority_operations',
      'callback arguments' => array('priority' => -2.0),
    ),
    'xmlsitemap_remove_terms' => array(
      'label' => t('Remove the vocabulary terms of the selected posts from the XML site map'),
      'callback' => '_xmlsitemap_term_priority_operations',
      'callback arguments' => array('priority' => -1.0),
    ),
  );
  return $operations;
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_term_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'update':
      $terms = taxonomy_node_get_terms($node);
      foreach ($terms as $term) {
        $result = db_fetch_object(db_query("SELECT tid, changed, previously_changed, priority_override
          FROM {xmlsitemap_term}
          WHERE tid = %d", $term->tid));
        if ($result === FALSE) {
          $row = new stdClass();
          $row->tid = $term->tid;
          $row->vid = $term->vid;
          $row->changed = $node->changed;
          $row->previously_changed = $node->created;
        }
        else {
          $row = $result;
          if ($row->changed < $node->changed) {
            $row->previously_changed = $row->changed;
            $row->changed = $node->changed;
          }
        }
        drupal_write_record('xmlsitemap_term', $row, $result === FALSE ? NULL : 'tid');
      }
      break;
  }
}

/**
 * Implementation of hook_taxonomy().
 */

function xmlsitemap_term_taxonomy($op, $type, $array = NULL) {
  if ($type == 'vocabulary') {
    switch ($op) {
      case 'delete':
        db_query("DELETE FROM {xmlsitemap_term} WHERE vid = %d", $array['vid']);
        variable_del('xmlsitemap_term_vocabulary_priority_'. $array['vid']);
        xmlsitemap_helper_update_sitemap('xmlsitemap_term');
        break;
      case 'insert':
      case 'update':
        if (isset($array['vid'])) {
          if (variable_get('xmlsitemap_term_vocabulary_priority_'. $array['vid'], 0.5) != $array['xmlsitemap_term_vocabulary_priority']) {
            variable_set('xmlsitemap_term_vocabulary_priority_'. $array['vid'], $array['xmlsitemap_term_vocabulary_priority']);
            xmlsitemap_helper_update_sitemap('xmlsitemap_term');
          }
        }
        break;
    }
  }
  else {
    switch ($op) {
      case 'delete':
        db_query("DELETE FROM {xmlsitemap_term} WHERE tid = %d", $array['tid']);
        break;
      case 'insert':
        if (isset($array['tid']) && isset($array['vid'])) {
          $row = new stdClass();
          $row->tid = $array['tid'];
          $row->vid = $array['vid'];
          $row->changed = XMLSITEMAP_TIME;
          $row->priority_override = isset($array['xmlsitemap_term_priority']) ? $array['xmlsitemap_term_priority'] : -2.0;
          drupal_write_record('xmlsitemap_term', $row);
        }
        break;
      case 'update':
        $result = db_fetch_object(db_query("SELECT tid, vid, changed, previously_changed, priority_override
          FROM {xmlsitemap_term}
          WHERE tid = %d", $term->tid)
        );
        if ($result === FALSE) {
          $row = new stdClass();
          $row->tid = $array['tid'];
          $row->vid = $array['vid'];
          $row->changed = XMLSITEMAP_TIME;
          $row->priority_override = isset($array['xmlsitemap_term_priority']) ? $array['xmlsitemap_term_priority'] : -2.0;
        }
        else {
          $row = $result;
          if (isset($array['xmlsitemap_term_priority'])) {
            $row->priority_override = $array['xmlsitemap_term_priority'];
          }
        }
        drupal_write_record('xmlsitemap_term', $row, $result === FALSE ? NULL : 'tid');
        break;
    }
    xmlsitemap_helper_update_sitemap('xmlsitemap_term');
  }
}

/**
 * Implementation of hook_xmlsitemap_description().
 */
function xmlsitemap_term_xmlsitemap_description() {
  return '<dt>'. t('XML Sitemap: Term') .'</dt>'.
    '<dd>'. t('The module adds <a href="@terms">taxonomy terms</a> (categories) to the site map. You can change the default priority when you add or edit a vocabulary, and you can override the default priority when you add or edit individual terms.', array('@terms' => url('admin/content/taxonomy'))) .'</dd>';
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_term_xmlsitemap_links($modules) {
  if (isset($modules['xmlsitemap']) || isset($modules['xmlsitemap_node']) || isset($modules['xmlsitemap_term'])) {
    db_query("DELETE FROM {xmlsitemap} WHERE type ='taxonomy'");
    $result = db_query(
      db_rewrite_sql(
        "SELECT t.tid, t.vid, v.module, xt.changed, xt.previously_changed, xt.priority_override
          FROM {term_data} t
          LEFT JOIN {vocabulary} v ON t.vid = v.vid
          LEFT JOIN {xmlsitemap_term} xt ON t.tid = xt.tid
          WHERE xt.priority_override <> -1",
        't', 'tid'
      )
    );
    $row = new stdClass();
    $row->module = 'xmlsitemap_term';
    $row->type = 'taxonomy';
    while ($term = db_fetch_object($result)) {
      if ($term->module == 'forum') {
        $row->loc = 'forum/'. $term->tid;
      }
      else {
        $row->loc = taxonomy_term_path($term);
      }
      $row->id = $term->tid;
      $row->changed = $term->changed;
      $row->changefreq = max(XMLSITEMAP_TIME - $term->changed, empty($term->previously_changed) ? 0 : $term->changed - $term->previously_changed);
      if ($term->priority_override != -2.0) {
        $priority = $term->priority_override;
      }
      elseif (($priority = variable_get('xmlsitemap_term_vocabulary_priority_'. $term->vid, 0.5)) != -1.0) {
        $count = (integer) db_result(db_query("SELECT COUNT(vid) FROM {term_node} WHERE tid = %d", $term->tid));
        if ($count > 1) {
          $priority += variable_get('xmlsitemap_term_node_priority', 0.2) * $count / 100;
        }
      }
      $row->priority = min(max(round($priority, 1), 0.0), 1.0);
      if (!db_result(db_query("SELECT COUNT(loc) FROM {xmlsitemap} WHERE loc = '%s'", $row->loc))) {
        drupal_write_record('xmlsitemap', $row);
      }
    }
  }
}

/**
 * Implementation of hook_xmlsitemap_sitemap_settings_alter().
 */
function xmlsitemap_term_xmlsitemap_sitemap_settings_alter(&$form) {
  $options = xmlsitemap_helper_priority_options();
  $form['general']['priority']['b']['xmlsitemap_term_node_priority'] = array(
    '#type' => 'select',
    '#title' => t('Term ratio weight - nodes'),
    '#description' => t("This number will be added to the priority of vocabulary term which is used by 100 nodes; for the other terms, the number is calculated proportionally to the number of nodes. This doesn't apply for terms that are used for just one node, nor for the vocabulary terms  for which the priority is overriden."),
    '#default_value' => variable_get('xmlsitemap_term_node_priority', 0.2),
    '#options' => $options,
  );
}


/*****************************************************************************
 * Private functions - node operation callbacks.
 ****************************************************************************/

/**
 * Node operations callback.
 */
function _xmlsitemap_term_priority_operations($nodes, $priority) {
  if (count($nodes)) {
    $batch = array(
      'operations' => array(
        array('_xmlsitemap_term_batch_process', array($nodes, $priority))
      ),
      'finished' => 'xmlsitemap_helper_batch_operations_finished',
      'title' => t('Processing'),
      'progress_message' => '',
      'error_message' => t('The update has encountered an error.'),
    );
    batch_set($batch);
  }
}

/*****************************************************************************
 * Private functions - batch operation callbacks.
 ****************************************************************************/

/**
 * Node operations batch process callback.
 */
function _xmlsitemap_term_batch_process($nodes, $priority, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($nodes);
    $context['sandbox']['nodes'] = $nodes;
    $context['sandbox']['terms'] = array();
  }
  if (empty($context['sandbox']['terms'])) {
    $nid = array_shift($context['sandbox']['nodes']);
    if ($node = node_load($nid, NULL, TRUE)) {
      $context['sandbox']['terms'] = taxonomy_node_get_terms($node);
      $context['sandbox']['node'] = $node;
    }
  }
  $term = array_shift($context['sandbox']['terms']);
  if (isset($term)) {
    $node = $context['sandbox']['node'];
    $result = db_fetch_object(db_query("SELECT tid, vid, changed, previously_changed, priority_override
      FROM {xmlsitemap_term}
      WHERE tid = %d", $term->tid)
    );
    if ($result === FALSE) {
      $row = new stdClass();
      $row->tid = $term->tid;
      $row->vid = $term->vid;
      $row->changed = $node->changed;
      $row->previously_changed = $node->created;
    }
    else {
      $row = $result;
      if ($node->changed > $row->changed) {
        $row->previously_changed = $row->changed;
        $row->changed = $node->changed;
      }
    }
    $row->priority_override = $priority;
    drupal_write_record('xmlsitemap_term', $row, $result === FALSE ? NULL : 'tid');
  }
  if (empty($context['sandbox']['terms'])) {
    $context['sandbox']['progress']++;
    if (!empty($context['sandbox']['node'])) {
      $node = $context['sandbox']['node'];
      $context['results'][] = l($node->title, 'node/'. $node->nid);
      if (count($context['results']) > 6) {
        array_shift($context['results']);
      }
    }
  }
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
