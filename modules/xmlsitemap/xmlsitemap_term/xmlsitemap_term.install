<?php
// $Id: xmlsitemap_term.install,v 1.5.2.35 2009/03/11 16:01:06 kiam Exp $

/**
 * @file
 * Installation file for XML Sitemap: Term.
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_enable().
 */
function xmlsitemap_term_enable() {
  drupal_load('module', 'xmlsitemap_helper');
  xmlsitemap_helper_update_sitemap('xmlsitemap_term');
}

/**
 * Implementation of hook_disable().
 */
function xmlsitemap_term_disable() {
  drupal_load('module', 'xmlsitemap_helper');
  xmlsitemap_helper_update_sitemap('xmlsitemap_term');
}

/**
 * Implementation of hook_schema().
 */
function xmlsitemap_term_schema() {
  $schema['xmlsitemap_term'] = array(
    'description' => 'The base table for xmlsitemap_term.',
    'fields' => array(
      'tid' => array(
        'description' => 'The vocabulary term ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The vocabulary ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp of the last change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'previously_changed' => array(
        'description' => 'The Unix timestamp of the previous change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'priority_override' => array(
        'description' => 'The priority of the term in the site map.',
        'type' => 'float',
        'not null' => TRUE,
        'default' => -2.0,
      ),
    ),
    'primary key' => array('tid'),
  );
  return $schema;
}

/**
 * Implementation of hook_install().
 */
function xmlsitemap_term_install() {
  drupal_install_schema('xmlsitemap_term');
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'xmlsitemap_term'");
}

/**
 * Implementation of hook_update_N().
 * Updates the SQL tables.
 */
function xmlsitemap_term_update_6000() {
  $ret = array();
  if (db_table_exists('xmlsitemap_term')) {
    if (db_column_exists('xmlsitemap_term', 'pid')) {
      $result = array();
      @db_drop_index($result, 'xmlsitemap_term', 'pid');
      if ($result[0]['success']) {
        $ret[] = $result[0];
      }
      db_drop_field($ret, 'xmlsitemap_term', 'pid');
    }
    $result = array();
    @db_drop_primary_key($result, 'xmlsitemap_term');
    if ($result[0]['success']) {
      $ret[] = $result[0];
    }
    if (db_column_exists('xmlsitemap_term', 'tid')) {
      db_change_field($ret, 'xmlsitemap_term', 'tid', 'tid',
        array(
          'description' => 'The vocabulary term ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        array('primary key' => array('tid'))
      );
    }
    else {
      db_add_field($ret, 'xmlsitemap_term', 'tid',
        array(
          'description' => 'The vocabulary term ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        array('primary key' => array('tid'))
      );
    }
    if (!db_column_exists('xmlsitemap_term', 'vid')) {
      db_add_field($ret, 'xmlsitemap_term', 'vid',
        array(
          'description' => 'The vocabulary ID.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        )
      );
    }
    if (db_column_exists('xmlsitemap_term', 'last_changed')) {
      db_change_field($ret, 'xmlsitemap_term', 'last_changed', 'changed',
        array(
          'description' => 'The Unix timestamp of the last change.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        )
      );
    }
    else {
      if (!db_column_exists('xmlsitemap_term', 'changed')) {
        db_add_field($ret, 'xmlsitemap_term', 'changed',
          array(
            'description' => 'The Unix timestamp of the last change.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
          )
        );
      }
      else {
        db_change_field($ret, 'xmlsitemap_term', 'changed', 'changed',
          array(
            'description' => 'The Unix timestamp of the last change.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
          )
        );
      }
    }
    if (!db_column_exists('xmlsitemap_term', 'previously_changed')) {
      db_add_field($ret, 'xmlsitemap_term', 'previously_changed',
        array(
          'description' => 'The Unix timestamp of the previous change.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        )
      );
    }
    else {
      db_change_field($ret, 'xmlsitemap_term', 'previously_changed', 'previously_changed',
        array(
          'description' => 'The Unix timestamp of the previous change.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        )
      );
    }
    $ret[] = update_sql("UPDATE {xmlsitemap_term}
      SET priority_override = -2.0
      WHERE priority_override IS NULL"
    );
    db_change_field($ret, 'xmlsitemap_term', 'priority_override', 'priority_override',
      array(
        'description' => 'The priority of the term in the site map.',
        'type' => 'float',
        'not null' => TRUE,
        'default' => -2.0,
      )
    );
  }
  else {
    db_create_table($ret, 'xmlsitemap_term',
      array(
        'description' => 'The base table for xmlsitemap_term.',
        'fields' => array(
          'tid' => array(
            'description' => 'The vocabulary term ID.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
           ),
           'vid' => array(
            'description' => 'The vocabulary ID.',
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
           ),
           'changed' => array(
             'description' => 'The Unix timestamp of the last change.',
             'type' => 'int',
             'unsigned' => TRUE,
             'not null' => TRUE,
             'default' => 0,
           ),
           'previously_changed' => array(
             'description' => 'The Unix timestamp of the previous change.',
             'type' => 'int',
             'unsigned' => TRUE,
             'not null' => TRUE,
             'default' => 0,
           ),
           'priority_override' => array(
             'description' => 'The priority of the term in the site map.',
             'type' => 'float',
             'not null' => TRUE,
             'default' => -2.0,
           ),
        ),
        'primary key' => array('tid'),
      )
    );
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_term_update_6100() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_term_update_6101() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_term_update_6102() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_term_update_6103() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_term_update_6104() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_term_update_6105() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_term_update_6106() {
  $ret[] = update_sql("UPDATE {system} SET weight = 10 WHERE name = 'xmlsitemap_term'");
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_term_update_6107() {
  return xmlsitemap_term_update_6000();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_term_update_6108() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_term_update_6109() {
  return array();
}

/**
 * Implementation of hook_update_N().
 *
 */
function xmlsitemap_term_update_6110() {
  module_load_include('inc', 'xmlsitemap_helper', 'includes/xmlsitemap_helper.install');
  xmlsitemap_helper_add_database_batch_operation(
    drupal_get_path('module', 'xmlsitemap_term') .'/xmlsitemap_term.install',
    '_xmlsitemap_term_update_database_batch'
  );
  $ret[] = array(
    'success' => TRUE,
    'query' => 'UPDATE {xmlsitemap_term} TABLE',
  );
  drupal_load('module', 'xmlsitemap_helper');
  xmlsitemap_helper_update_sitemap('xmlsitemap_term');
  $ret[] = array(
    'success' => TRUE,
    'query' => 'FORCE SITEMAP UPDATE',
  );
  return $ret;
}

/**
 * Implementation of hook_uninstall().
 */
function xmlsitemap_term_uninstall() {
  drupal_uninstall_schema('xmlsitemap_term');
  db_query("DELETE FROM {variable} WHERE name LIKE 'xmlsitemap\_term\_%'");
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Batch function to update the xmlsitemap_term table.
 */
function _xmlsitemap_term_update_database_batch(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    if (!($context['sandbox']['max'] = (integer) db_result(db_query('SELECT COUNT(tid) FROM {term_data} WHERE vid <> 0')))) {
      return;
    }
    $context['sandbox']['tid'] = 0;
    $context['sandbox']['vid'] = 0;
  }
  if (!$context['sandbox']['vid']) {
    $context['sandbox']['tid'] = (integer) db_result(db_query('SELECT tid 
      FROM {term_data}
      WHERE vid <> 0
        AND tid > %d', $context['sandbox']['tid'])
    );
  }
  if ($tid = $context['sandbox']['tid']) {
    $data = db_fetch_object(db_query('SELECT n.vid, n.created, n.changed
      FROM {node} n
      INNER JOIN {term_node} tn ON tn.vid = n.vid
      WHERE tn.tid = %d
        AND n.vid > %d
      ORDER BY n.changed, n.created',
      $tid, $context['sandbox']['vid'])
    );
    $vocabulary = (integer) db_result(db_query('SELECT vid 
      FROM {term_data}
      WHERE vid <> 0
        AND tid = %d', $tid)
    );
    if ($data !== FALSE && $vocabulary) {
      $context['sandbox']['vid'] = $data->vid;
      $result = db_fetch_object(db_query("SELECT tid, vid, changed, previously_changed, priority_override
        FROM {xmlsitemap_term}
        WHERE tid = %d", $tid)
      );
      if ($result === FALSE) {
        $row = new stdClass();
        $row->tid = $tid;
        $row->vid = $vocabulary;
        $row->changed = $data->changed;
        $row->previously_changed = $data->created;
      }
      else {
        $row = $result;
        if (empty($row->vid)) {
          $row->vid = $vocabulary;
        }
        if ($data->changed > $row->changed) {
          $row->previously_changed = $row->changed;
          $row->changed = $data->changed;
        }
      }
      drupal_write_record('xmlsitemap_term', $row, $result === FALSE ? NULL : 'tid');
    }
    else {
      $context['sandbox']['vid'] = 0;
    }
  }
  if (!$context['sandbox']['vid']) {
    $context['sandbox']['progress']++;
  }
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    drupal_load('module', 'xmlsitemap_helper');
    xmlsitemap_helper_update_sitemap('xmlsitemap_term');
  }
}