<?php
// $Id: xmlsitemap_helper.module,v 1.1.2.4 2009/03/18 21:04:15 kiam Exp $

/**
 * @file
 * Contains the code shared with the modules adding links into the XML site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_boot().
 */
function xmlsitemap_helper_boot() {
  define('XMLSITEMAP_TIME', time());
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Batch callback called when the batch operations are completed.
 */
function xmlsitemap_helper_batch_operations_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The update has been performed.'));
  }
  else {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
    $message = format_plural($count = count($results), '1 item successfully processed.', '@count items successfully processed.');
    if ($count) {
      $message .= theme('item_list', $results, t('Last items successfully processed:'));
    }
    drupal_set_message($message);
  }
}

/**
 * Determine the frequency of updates to a link.
 * @param $interval
 *  The number of seconds since the last change, or the number of seconds
 *  between the last change, and the previous change.
 * @return
 *  A string representing the update frequency according to the sitemaps.org
 *  protocol.
 */
function xmlsitemap_helper_frequency($interval) {
  $frequencies = array(
    'always' => 3600,
    'hourly' => 86400,
    'daily' => 604800,
    'weekly' => 2419200,
    'monthly' => 29030400,
    'yearly' => 100000000,
  );
  if ($interval < 0 || !is_numeric($interval)) {
    return 'never';
  }
  foreach ($frequencies as $frequency => $value) {
    if ($interval < $value) {
      break;
    }
  }
  return $frequency;
}

/**
 * Get an array of site map priority options.
 * @param $option
 *  If not given, the array will include priority values from 0.0 to 1.0.
 * - exclude: Add option to exclude item from site map.
 * - default: Add option to use default priority. Only for cases where a
 *   default priority exists.
 * - both: Add both the default and exclude options.
 * @return
 *  An array of priority options.
 */
function xmlsitemap_helper_priority_options($option = '') {
  $options = array(
    '1' => t('1.0'),
    '0.9' => t('0.9'),
    '0.8' => t('0.8'),
    '0.7' => t('0.7'),
    '0.6' => t('0.6'),
    '0.5' => t('0.5'),
    '0.4' => t('0.4'),
    '0.3' => t('0.3'),
    '0.2' => t('0.2'),
    '0.1' => t('0.1'),
    '0' => t('0.0')
  );
  if ($option == 'exclude' || $option == 'both') {
    $options['-1'] = t('Not in site map');
  }
  if ($option == 'default' || $option == 'both') {
    $options['-2'] = t('Default');
  }
  return $options;
}

/**
 * Complete the query used to select rows from the xmlsitemap table.
 */
function xmlsitemap_helper_sitemap_query() {
  global $language;
  $default = language_default();
  switch(variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE)) {
    case LANGUAGE_NEGOTIATION_NONE:
      $language_query = '';
      break;
    case LANGUAGE_NEGOTIATION_PATH_DEFAULT:
    case LANGUAGE_NEGOTIATION_PATH:
      if (variable_get('xmlsitemap_all_links_to_default_language', 0) && $language->language == $default->language) {
        $language_query = '';
      }
      else {
        $language_query = "AND (xsm.language = '". $language->language ."' OR xsm.language = '')";
      }
      break;
    case LANGUAGE_NEGOTIATION_DOMAIN:
      $language_query = "AND (xsm.language = '". $language->language ."' OR xsm.language = '')";
  }
  return "
    FROM {xmlsitemap} xsm
    INNER JOIN {system} s ON s.name = xsm.module
    WHERE s.type = 'module'
      AND s.status = 1
      AND xsm.changefreq <> 0
      AND xsm.changed <> 0
      $language_query
      AND (xsm.priority >= 0 AND xsm.priority <= 1)
    ";
}

/**
 * Mark the site map as changed, and the cache as needing update; it also
 * clean the cached output.
 */
function xmlsitemap_helper_update_sitemap($module = 'xmlsitemap') {
  menu_rebuild();
  db_query("DELETE FROM {cache_page} WHERE cid LIKE '%%sitemap%%.xml'");
  if (!variable_get('xmlsitemap_sitemap_is_changed', FALSE)) {
    variable_set('xmlsitemap_sitemap_is_changed', TRUE);
  }
  if (!variable_get('xmlsitemap_sitemap_needs_update', FALSE)) {
    variable_set('xmlsitemap_sitemap_needs_update', TRUE);
  }
  $modules = variable_get('xmlsitemap_update_sitemap_request', array());
  if (!isset($modules[$module])) {
    $modules[$module] = TRUE;
    variable_set('xmlsitemap_update_sitemap_request', $modules);
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
